# -*- coding: utf-8 -*-
"""Speech_to_Text_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11jr-zD6EIYqQjtt9yu-O6SLPk6_ZmKSs

# **Speech-to-Text Project**
"""

#Import necessary libraries
!pip install --upgrade google-cloud-speech
import os
import pprint

from google.cloud import storage
from google.cloud import speech
from google.cloud import language_v1
from google.cloud import firestore

# Load Service Account

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "sa.json"

def list_blobs(bucket_name):
    """Lists all the blobs in the bucket."""

    storage_client = storage.Client()

    blobs = storage_client.list_blobs(bucket_name)
    return blobs

def extract_audio_gcs(gcs_uri):
    """Asynchronously transcribes the audio file specified by the gcs_uri."""

    client = speech.SpeechClient()

    audio = speech.RecognitionAudio(uri=gcs_uri)
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        audio_channel_count=2,
        language_code="en-US",
    )

    operation = client.long_running_recognize(config=config, audio=audio)

    print("Waiting for operation to complete...")
    response = operation.result(timeout=90)

    return response

def analyze_sentiment(text):
    client = language_v1.LanguageServiceClient()
    document = language_v1.Document(content=text, type_=language_v1.Document.Type.PLAIN_TEXT)
    sentiment = client.analyze_sentiment(request={'document': document}).document_sentiment
    return sentiment.score, sentiment.magnitude

bucket_name = "admn5015-w25-mahilar"
blobs = list_blobs(bucket_name)

for blob in blobs:
    print(blob.name)

    # Create audio file URI
    gcs_uri = "gs://" + bucket_name + "/" + blob.name
    print("\nThis is the uri: {}".format(gcs_uri))

    # Extract text from audio file
    response = extract_audio_gcs(gcs_uri=gcs_uri)
    pprint.pprint(response)

    # Access each response element
    print("Accessing each element:")

    data = []

    if response.results:
      for i, result in enumerate(response.results):

    # Analyze sentiment for each transcribed sentence
        sentence_text = result.alternatives[0].transcript
        sentiment_score, sentiment_magnitude = analyze_sentiment(sentence_text)


        data.append({
            'wav_filename': blob.name,
            'sentence_text': sentence_text,
            'transcription_date': "2025-01-28"
        })


    pprint.pprint(data)

# Initialize the Firestore client
db = firestore.Client()

collection_ref = db.collection('speech_data')
docs=collection_ref.stream()
for doc in docs:
  print(doc.to_dict())

df = pd.DataFrame(data)
print(df)

"""# **Visualization**"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Set style
sns.set_theme(style="whitegrid")

# Creating the visualizations
figsize=(14, 10)

# Sentiment Distribution
plt.figure(figsize=(7, 5))
sns.histplot(df["sentiment"], bins=10, kde=True, color="blue")
plt.title("Sentiment Score Distribution")
plt.xlabel("Sentiment Score")
plt.ylabel("Frequency")
plt.show()

# Magnitude vs. Sentiment Scatter Plot
plt.figure(figsize=(7, 5))
sns.scatterplot(x=df["sentiment"], y=df["magnitude"], color="red")
plt.title("Magnitude vs. Sentiment")
plt.xlabel("Sentiment Score")
plt.ylabel("Magnitude")
plt.show()

# Sentiment Over Time (Sentence Number)
plt.figure(figsize=(7, 5))
sns.lineplot(x=df["sentence_number"], y=df["sentiment"], marker="o", color="green")
plt.title("Sentiment Over Sentences")
plt.xlabel("Sentence Number")
plt.ylabel("Sentiment Score")
plt.show()

"""**Interpretation**

Sentiment Distribution: The conversation has both strong positive (0.9) and negative (-0.7) emotions, indicating a mix of satisfaction and frustration.


Magnitude vs. Sentiment: Higher sentiment values (both positive and negative) have stronger emotional intensity, showing that certain parts of the conversation were highly expressive.

Sentiment Over Sentences: The conversation fluctuates between positive and negative tones, suggesting moments of customer frustration followed by resolution.


Sentiment Category Distribution: Positive sentiment dominates, indicating an overall satisfactory experience, but negative moments highlight areas for improvement in customer interaction.

"""